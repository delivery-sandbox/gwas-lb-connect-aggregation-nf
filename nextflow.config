// Please do not change the order of the numbered sections!
// The expected order is: 1. Parameters - 2. Profiles - 3. Process -  4. Executor

// There is a high chance it would break the configuration of 'profiles'

// 0. Manifest

 manifest {
  name = 'iudlgnt-gwas-sumstats-utils'
  description = 'GWAS harmonisation pipeline'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '2.0.0'
}

// 1. Parameters

// NOTE:
// Initialise the values of the params to the preferred default value or to false
params {
    // output folder options
    outdir          = 'results'
    tracedir        = "${params.outdir}/pipeline_info"

    // client-specific variables to be used in pipeline introspection reporting
    raci_owner        = "Lifebit"
    domain_keywords   = "GWAS; harmonisation; population-genomics"
    unique_identifier = "042bf2ae909ea03b9a909b0512e89d7c"

    // inputs
    input = false
    input_type = 'regenie_folder_for_lb_connect' // ['list', 'single']
    gwas_source = "gwas_table"
    standardise = true
    coef_conversion = true
    map_traits = false
    take_n_studies = -1
    miss_percent_allow = 0.1
    munge_method = "MSS"     // MSS | simple
    force_munge = false
    keep_intermediate_files = true
    omop_vocabulary = "https://omopvocabs.s3.eu-west-1.amazonaws.com/omop-vocab-clean.zip"
    convert_to_hail = false

    dbsnp = 144  // 155 or 144 are supported

    // Filter options
    filter_beta_smaller_than = -0.3
    filter_beta_greater_than = 0.3
    filter_p_greater_than    = 0.5
    filter_freq_smaller_than = 0.3
    filter_freq_greater_than = 0.8
    filter_missing_info       = false
    filter_info               = null


    // report_dir is:
    // - the folder from the container that includes the scripts for NF <= v20.01 (bin)
    // - the ${projectDir}/bin folder of the root of the repo with the scripts for NF >= v20.10
    report_dir = '/opt/bin/'

    // when set to true, prints help and exits
    help = false

    // default container for all processes, excluding those defined differently via the usage with 'withName'
    container = 'quay.io/lifebitai/gwas_fetch:1.0.0'

    // process resources defaults
    cpus   = 2
    memory = 2.GB
    disk   = '30.GB'

    // max resources limits defaults
    max_cpus   = 2
    max_memory = 6.GB
    max_time   = 8.h

    // execution related defaults
    config        = 'conf/standard.config'
    echo          = false
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
    maxRetries    = 9
    maxForks      = 200
    queueSize     = 200
    executor      = false

    // google-lifesciences
    gls_bootDiskSize = '50.GB'
    gls_preemptible  = true
    zone             = 'us-east1-b'
    network          = 'default'
    subnetwork       = 'default'

    // AWS batch
    aws_region = 'eu-west-1'
    aws_batch_default_queue = "optimal-instance-1tb-ami-spot-queue"
    aws_batch_cli_path = '/home/ec2-user/miniconda/bin/aws' 
    aws_batch_fetch_instance_type = true
    aws_batch_max_parallel_transfers = 2
    aws_batch_volumes = '/home/ec2-user/.aws:/root/.aws'

    raci_owner        = "Lifebit"
    domain_keywords   = "gwas-summary-statistics; harmonisation; population-genomics"
    unique_identifier = "a225a94cad4dc01fa32dbbac6466cf85"

    // from metagwas
    // sumstats format 
    a1_col = "Allele1"
    a2_col = "Allele2"
    chr_col = "CHR"
    pos_col = "POS"
    rsid_col = "SNPID"
    beta_col = "BETA"
    pval_col = "p.value"
    se_col = "SE"
    freq_col = "FRQ"
    metal_freq_col = "AF_Allele2"

    // 2 - METAL OPTIONS

    metal_memory = 6.GB

    // WARNINGS: 
    // - Options that indirectly interfere with the pipeline design are not made available.
    // For example: the option SEPARATOR is not made available, as it would interfere with the input datasets
    // are being manipulated by the pipeline.

    // 1 - METAL options for describing input files
    
    flip       = false

    // 2 - METAL options for filtering input files
    
    addfilter     = false
    removefilters = false

    // 3 - METAL options for sample size weighted meta-analysis
    
    weightlabel   = false
    defaultweight = false
    minweight     = false

    // 4 - METAL options for inverse variance weighted meta-analysis

    stderrlabel = "SE"
    scheme      = "STDERR"

    // 5 - METAL options to enable tracking of allele frequencies

    averagefreq = false
    minmaxfreq  = false
    freqlabel   = false

    // 6 - METAL options to enable tracking of user defined variables

    customvariable = false
    label          = false

    // 7 - METAL options to enable explicit strand information

    usestrand   = false
    strandlabel = false

    // 8 - METAL options for automatic genomic control correction of input statistics

    genomiccontrol = false

    // 9 - METAL options for general analysis control  

    outfile     = false
    maxwarnings = false
    verbose     = false
    logpvalue   = false
    heterogeneity = false

    // 10 - METAL options for general run controlnot available (pipeline is not currently developed to handle this)

    // Plotting options
    gff3_for_locuszoom = 's3://lifebit-featured-datasets/pipelines/omics/refseqselect.hg38.gff3'
    ld_ensembl_pop = '1000GENOMES:phase_3:GBR'
    p_val_threshold = 1e-6
    plot_top_n = 5
}


// 2. Profiles


// Do not update the order because the values set in params scope will not be overwritten
// Do not attempt to simplify to
// includeConfig params.config
// outside of profiles scope, it will fail to update the values of the params
profiles {
    standard {includeConfig params.config}
    docker { docker.enabled = true }
    base {includeConfig 'conf/base.config'}
    awsbatch { includeConfig 'conf/aws-batch.config' }
    google {includeConfig 'conf/google.config'}
    network_cluster {includeConfig 'conf/network_cluster.config'}
    network_cloudos {includeConfig 'conf/network_cloudos.config'}
    test_ebi {includeConfig 'conf/test_ebi.config'}
    test_ebi_dbsnp155 {includeConfig 'conf/test_ebi_dbsnp155.config'}
    test_ieu {includeConfig 'conf/test_ieu.config'}
    test_ieu_dbsnp155 {includeConfig 'conf/test_ieu_dbsnp155.config'}
    test_gwas_vcf_list {includeConfig 'conf/test_gwas_vcf_list.config'}
    test_gwas_vcf_single_file {includeConfig 'conf/test_gwas_vcf_single_file.config'}
    test_gwas_tables_all {includeConfig 'conf/test_gwas_tables_all.config'}
    test_lb_connect_aggregation {includeConfig 'conf/test_lb_connect_aggregation.config'}
    singularity {includeConfig 'conf/singularity.config'}
}

// This comes after profiles so setting dbsnp in profile changes these params correctly
if (params.dbsnp == 155) {
  params.snplocs_grch38 = 's3://lifebit-featured-datasets/pipelines/downstream-omics/sumstats-harmonisation/BioC.SNPlocs/SNPlocs.Hsapiens.dbSNP155.GRCh38_0.99.22.tar.gz'
  params.snplocs_grch37 = 's3://lifebit-featured-datasets/pipelines/downstream-omics/sumstats-harmonisation/BioC.SNPlocs/SNPlocs.Hsapiens.dbSNP155.GRCh37_0.99.22.tar.gz'
} else if (params.dbsnp == 144) {
  params.snplocs_grch38 = 's3://lifebit-featured-datasets/pipelines/downstream-omics/sumstats-harmonisation/BioC.SNPlocs/SNPlocs.Hsapiens.dbSNP144.GRCh38_0.99.20.tar.gz'
  params.snplocs_grch37 = 's3://lifebit-featured-datasets/pipelines/downstream-omics/sumstats-harmonisation/BioC.SNPlocs/SNPlocs.Hsapiens.dbSNP144.GRCh37_0.99.20.tar.gz'
}

// 3. Process

includeConfig 'conf/base.config'    // memory/cpu limits for process labels

// Do not change order of block, must follow after profiles scope (last section that updates params)
process {
    echo          = params.echo
    cpus          = params.cpus
    memory        = params.memory
    maxRetries    = params.maxRetries
    maxForks      = params.maxForks
    container     = params.container
    errorStrategy = params.errorStrategy
    queue         = "${params.aws_batch_default_queue}"

    withLabel: vcf {
      container = 'quay.io/lifebitai/gwas:1.2dev'
    }

    withName: run_metal {
      memory = params.metal_memory
      container = 'quay.io/lifebitai/metagwas:1.0.0'
    }

    withLabel: munge {
        container = 'quay.io/lifebitaiorg/harmonisations-mungesumstats:1.1.0'
        cpus = check_max(4, 'cpus')
    }

    withName: fetch_from_ebi {
      errorStrategy = 'ignore'
    }

    withLabel: python {
        container = 'quay.io/lifebitai/cloudos-py:v0.0.5'
    }

    withName: map_traits {
        container = 'quay.io/lifebitai/etl-map-omop-vocabulary:latest'
    }

    withName: make_qc_plots {
      container = 'quay.io/lifebitai/gwas_qc_plots:latest'
    }

    withLabel: bcftools {
      container = 'quay.io/lifebitai/gwas:1.2dev'
    }
    withName: insert_traits {
      container = 'quay.io/lifebitaiorg/harmonisations-mungesumstats:1.1.0'
    }

    withLabel: report {
      container = 'quay.io/lifebitai/metagwas-report:1.0.1'
    }

    withName: create_report {
      container = 'quay.io/lifebitai/report'
    }

    withName: vcf2hail {
      container = 'quay.io/lifebitai/hail:1.0.0'
    }
}

// 4. Executor - Do not remove this section! Required for running with different executors using --executor parameter

executor {
    name      = params.executor
    queueSize = params.queueSize
}

// 5. Nextflow timeline, report and trace reports

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    fields  = 'task_id,native_id,process,name,tag,status,exit,cpus,%cpu,memory,%mem,rss,vmem,peak_rss,peak_rss,container'
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}

// 6. Manifest

manifest {
    name            = 'lifebit-ai/xxxx'
    homePage        = 'https://github.com/xxxx'
    description     = 'Pipeline description'
    mainScript      = 'main.nf'
    version         = "1.0dev"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
